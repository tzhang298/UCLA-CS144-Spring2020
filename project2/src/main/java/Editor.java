import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.*;
import java.text.SimpleDateFormat;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     *
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */

     private static final List<String> VALID_PARAMETERS = Arrays.asList("action", "username", "postid", "title", "body");
     private static final String SQL_RETRIEVEONE = "SELECT * FROM Posts WHERE username = ? AND postid = ?";
     private static final String SQL_MAXID = "SELECT MAX(postid) AS max FROM Posts WHERE username = ?";
     private static final String SQL_INSERT = "INSERT INTO Posts(username, postid, title, body, modified, created) "
             + "VALUES(?,?,?,?,NOW(),NOW());";
     private static final String SQL_UPDATE = "UPDATE Posts SET title=?,body=?,modified=NOW() WHERE username = ? AND postid = ?";
     private static final String SQL_DELETE = "DELETE FROM Posts WHERE username = ? AND postid = ?";
     private static final String SQL_RETRIEVEALL = "SELECT * FROM Posts WHERE username = ? ORDER BY postid";
     private static final String SQL_NUM_ROW = "SELECT COUNT(*) FROM Posts";

     private static final String DATABASE_DRIVER = "com.mysql.jdbc.Driver";
     private static final String DATABASE_URL = "jdbc:mysql://localhost:3306/CS144";
     private static final String USERNAME = "cs144";
     private static final String PASSWORD = "";

    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
        System.out.println("Editor servlet has started");

    }

    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
        System.out.println("Editor servlet has stopped");

    }

    private void get_err_message(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        request.getRequestDispatcher("/error.jsp").forward(request, response);
    }

    private boolean checkparameter(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        Enumeration<String> list = request.getParameterNames();
        while (list.hasMoreElements()) {
            String parameter = list.nextElement();
            if (!VALID_PARAMETERS.contains(parameter)) {
                request.setAttribute("error", "Invalid Parameter " + parameter);
                get_err_message(request, response);
                return false;
            }
        }
        return true;
    }
    /**
     * Handles HTTP GET requests
     *
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
    	// implement your GET method handling code here
    	// currently we simply show the page generated by "edit.jsp"

      String action = request.getParameter("action");
      if (!checkparameter(request, response)) {
         return;
       }
      if (action == null) {
         request.setAttribute("error"," : Action not found (doGet)");
         get_err_message(request, response);
      } else {
         switch (action) {
         case "open":
             open(request, response);
             break;
         case "preview":
             preview(request, response);
             break;
         case "list":
             list(request, response);
             break;
         default:
             request.setAttribute("error"," : Action not found (doGet)");
             get_err_message(request, response);
             break;
         }
      }
    }

    /**
     * Handles HTTP POST requests
     *
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException
    {
    	// implement your POST method handling code here
    	// currently we simply show the page generated by "edit.jsp"
       String action = request.getParameter("action");
       switch (action) {
       case "open":
           open(request, response);
           break;

       case "save":
           save(request, response);
           break;

       case "delete":
           delete(request, response);
           break;

       case "preview":
           preview(request, response);
           break;

       case "list":
           list(request, response);
           break;

       default:
           request.setAttribute("error", " : Action not found (doPost)");
           get_err_message(request, response);
           break;
       }
    }

    private void open(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

      int postid_Int = 0;
      Connection connect = null;
      PreparedStatement ps = null;
      ResultSet rs = null;
      String action = null, username = null, postid = null, title = null, body = null;

      action = request.getParameter("action");
      username = request.getParameter("username");
      postid = request.getParameter("postid");
      title = request.getParameter("title");
      body = request.getParameter("body");

      if (username == null || postid == null) {
          request.setAttribute("error", "username and postid are null");
          get_err_message(request, response);
      } else if (!postid.matches("-?\\d+")) {
          request.setAttribute("error", "postid is not Integer! ");
          get_err_message(request, response);
      } else {
          postid_Int = Integer.parseInt(postid);
          if (title == null || body == null) {
              try {
                  Class.forName(DATABASE_DRIVER);
                  connect = DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);
                  ps = connect.prepareStatement(SQL_RETRIEVEONE);
                  ps.setString(1, username);
                  ps.setInt(2, postid_Int);

                  rs = ps.executeQuery();
                  if (!rs.next()) {
                      request.setAttribute("error", "(username, postid) not in the database");
                      get_err_message(request, response);

                  } else {
                      title = rs.getString("title");
                      body = rs.getString("body");
                      request.setAttribute("title", title);
                      request.setAttribute("body", body);
                      request.getRequestDispatcher("/edit.jsp").forward(request, response);
                  }
              } catch (Exception ex) {
                  request.setAttribute("error", "Exception: " + ex.getMessage());
                  get_err_message(request, response);
              } finally {
                  try {
                      rs.close();
                      ps.close();
                      connect.close();
                  } catch (Exception e) {

                  }
              }
          } else {
              request.getRequestDispatcher("/edit.jsp").forward(request, response);
          }
      }

    }

    private void save(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      int postid_Int = 0;
      Connection connect = null;
      PreparedStatement ps = null;
      ResultSet rs = null;
      String action = null, username = null, postid = null, title = null, body = null;

      action = request.getParameter("action");
      username = request.getParameter("username");
      postid = request.getParameter("postid");
      title = request.getParameter("title");
      body = request.getParameter("body");

      if (username == null || postid == null) {
          request.setAttribute("error", "username and postid are null");
          get_err_message(request, response);
      } else if (!postid.matches("-?\\d+")) {
          request.setAttribute("error", "postid is not Integer! ");
          get_err_message(request, response);
      } else {
          postid_Int = Integer.parseInt(postid);
          try {
              Class.forName(DATABASE_DRIVER);
              connect = DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);
              if (postid_Int <= 0) {
                  ps = connect.prepareStatement(SQL_MAXID);
                  ps.setString(1, username);
                  rs = ps.executeQuery();
                  if (!rs.next()) {
                      postid_Int = 1;
                  } else {
                      postid_Int = rs.getInt("max") + 1;
                  }
                  try {
                      rs.close();
                      ps.close();
                  } catch (Exception e) {
                  }
                  ps = connect.prepareStatement(SQL_INSERT);

                  ps.setString(1, username);
                  ps.setInt(2, postid_Int);
                  ps.setString(3, title);
                  ps.setString(4, body);
                  ps.executeUpdate();
                  list(request, response);

              } else {
                  ps = connect.prepareStatement(SQL_RETRIEVEONE);
                  ps.setString(1, username);
                  ps.setInt(2, postid_Int);
                  rs = ps.executeQuery();
                  if (rs.next()) {
                      try {
                          rs.close();
                          ps.close();
                      } catch (Exception e) {
                      }
                      ps = connect.prepareStatement(SQL_UPDATE);
                      ps.setString(1, title);
                      ps.setString(2, body);
                      ps.setString(3, username);
                      ps.setInt(4, postid_Int);
                      ps.executeUpdate();
                      list(request, response);
                  }
              }
          } catch (Exception ex) {
              request.setAttribute("error", "Exception: " + ex.getMessage());
              get_err_message(request, response);
          } finally {
            

            try {
                rs.close();
                ps.close();
                connect.close();
            } catch (Exception e) {
            }
          }
      }
    }

    private void delete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      int postid_Int = 0;
      Connection connect = null;
      PreparedStatement ps = null;
      ResultSet rs = null;
      String action = null, username = null, postid = null, title = null, body = null;

      action = request.getParameter("action");
      username = request.getParameter("username");
      postid = request.getParameter("postid");
      title = request.getParameter("title");
      body = request.getParameter("body");

      if (username == null || postid == null) {
          request.setAttribute("error", "username and postid are null");
          get_err_message(request, response);
      } else if (!postid.matches("-?\\d+")) {
          request.setAttribute("error", "postid is not Integer! ");
          get_err_message(request, response);
      } else {
           postid_Int = Integer.parseInt(postid);
           try {
               Class.forName(DATABASE_DRIVER);
               connect = DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);
               ps = connect.prepareStatement(SQL_DELETE);
               ps.setString(1, username);
               ps.setInt(2, postid_Int);
               ps.executeUpdate();
               list(request, response);

           } catch (Exception ex) {
               request.setAttribute("error", "Exception: " + ex.getMessage());
               get_err_message(request, response);
           } finally {
               try {
                   ps.close();
                   connect.close();
               } catch (Exception e) {
               }
           }
       }


   }

   private void preview(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
      int postid_Int = 0;
      Connection connect = null;
      PreparedStatement ps = null;
      ResultSet rs = null;
      String action = null, username = null, postid = null, title = null, body = null;

      action = request.getParameter("action");
      username = request.getParameter("username");
      postid = request.getParameter("postid");
      title = request.getParameter("title");
      body = request.getParameter("body");

      if (username == null || postid == null) {
          request.setAttribute("error", "username and postid are null");
          get_err_message(request, response);
      } else if (!postid.matches("-?\\d+")) {
          request.setAttribute("error", "postid is not Integer! ");
          get_err_message(request, response);
      } else {
            Parser parser = Parser.builder().build();
            HtmlRenderer renderer = HtmlRenderer.builder().build();
            Node document = parser.parse(title);
            String renderedTitle = renderer.render(document);
            document = parser.parse(body);
            String renderedBody = renderer.render(document);
            request.setAttribute("renderedTitle", renderedTitle);
            request.setAttribute("renderedBody", renderedBody);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
        }
    }

    private void list(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = null, username = null, title = null, body = null;
        int postid_Int = 0;
        Date modifiedDate = null, createdDate = null;
        String modified = null, created = null;
        Connection connect = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        action = request.getParameter("action");
        username = request.getParameter("username");
        title = request.getParameter("title");
        body = request.getParameter("body");

        if (username == null) {
          request.setAttribute("error", "username is null");
          get_err_message(request, response);
        } else {
            try {
                Class.forName(DATABASE_DRIVER);
                connect = DriverManager.getConnection(DATABASE_URL, USERNAME, PASSWORD);
                ps = connect.prepareStatement(SQL_RETRIEVEALL);
                ps.setString(1, username);
                rs = ps.executeQuery();
                
                List<MyEntry> list = new ArrayList<>();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy HH:mm");
                while (rs.next()) {
                    username = rs.getString("username");
                    postid_Int = rs.getInt("postid");
                    title = rs.getString("title");
                    body = rs.getString("body");
                    modifiedDate = rs.getTimestamp("modified");
                    createdDate = rs.getTimestamp("created");
                    modified = dateFormat.format(modifiedDate);
                    created = dateFormat.format(createdDate);
                    MyEntry pe = new MyEntry(username,postid_Int,title,body,modified,created);
                    list.add(pe);
                }
                request.setAttribute("list",list);
                request.getRequestDispatcher("/list.jsp").forward(request, response);
            } catch (Exception ex) {
                request.setAttribute("error", "Exception: " + ex.getMessage());
                get_err_message(request, response);
            } finally {
                try {
                    rs.close();
                    ps.close();
                    connect.close();
                } catch (Exception e) {
                }
            }
        }
    }




}
